散列：散列使用一个散列函数，将一个键映射到一个索引上
散列函数：典型的散列函数首先将搜索键转换成一个称为散列码的整数值，然后将散列码压缩为散列表中的索引
     Java的Object类有hashCode方法：
        1）当equals方法被重写时，需要重写hashCode方法，保证两个相等的对象返回同样的散列码
        2）程序执行中，如果对象的数据没有被修改，则多次调用返回相同的散列码
        3）两个不想等的对象可能具有相同的散列码
     ---基本数据类型的散列码
            byte,short,int,char----->取其int值
            float----->Float.floatToIntBits(key)
            long------>(int)(key ^ (key >> 32))  折叠操作
     ---字符串类型的散列码
            多项式散列码：s0 * b^(n-1) + s1 * b^(n-2) + ... + s（n-1)
            b一般取31 33 37 39 41
     ---压缩散列码
            h = hashCode % N
            N 为2 的整数幂  ==》h = hashCode & (n - 1)
 冲突：当两个键映射到散列表中的同一个索引上，发生冲突， 处理方法有开放地址法和链地址法
     开放地址法：在冲突发生时，在散列表中找到一个开放位置的过程。包括线性探测，二次探测，再哈希法。
            线性探测：插入时顺序找到下一个可用的位置。
                      查找时查找索引的值及下一个索引的值，直到找到或者遇到为空的单元。
                      删除时查找匹配的条目，标记该单元
            二次探测法：从索引为k + j^2  j = 1, 2, 3, 4..查找，避免了线性成簇的问题，但存在二次成簇的问题
            再哈希法：审查（k + j*h`(key))%N的单元
     链地址法：将具有同样的散列索引的条目存放在一个位置，而不是寻找要给新的位置。每个位置使用一个桶来放置多个条目

 装填因子：衡量一个散列表有多满。元素数目与散列表大小的比值。
 再散列：如果装填因子溢出，则增加散列表的大小，并重新装载条目到一个更大的散列表中。

